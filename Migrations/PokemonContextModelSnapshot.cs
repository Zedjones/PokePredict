// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokePredict.Database;

namespace PokePredict.Migrations
{
    [DbContext(typeof(PokemonContext))]
    partial class PokemonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("PokePredict.Database.Models.DamageRelation", b =>
                {
                    b.Property<string>("SourceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetType")
                        .HasColumnType("TEXT");

                    b.Property<float>("DamageMultiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("TypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName1")
                        .HasColumnType("TEXT");

                    b.HasKey("SourceType", "TargetType", "DamageMultiplier");

                    b.HasIndex("TypeName");

                    b.HasIndex("TypeName1");

                    b.ToTable("DamageRelation");
                });

            modelBuilder.Entity("PokePredict.Database.Models.Move", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Accuracy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PokemonName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Target")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("PokemonName");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("PokePredict.Database.Models.Pokemon", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("PokePredict.Database.Models.Stat", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PokeName")
                        .HasColumnType("TEXT");

                    b.Property<int>("BaseStat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Effort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PokemonName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name", "PokeName");

                    b.HasIndex("PokemonName");

                    b.ToTable("Stat");
                });

            modelBuilder.Entity("PokePredict.Database.Models.StatChange", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Change")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name", "MoveName");

                    b.HasIndex("MoveName");

                    b.ToTable("StatChange");
                });

            modelBuilder.Entity("PokePredict.Database.Models.Type", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PokemonName")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.HasIndex("PokemonName");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("PokePredict.Database.Models.DamageRelation", b =>
                {
                    b.HasOne("PokePredict.Database.Models.Type", null)
                        .WithMany("DamageFrom")
                        .HasForeignKey("TypeName");

                    b.HasOne("PokePredict.Database.Models.Type", null)
                        .WithMany("DamageTo")
                        .HasForeignKey("TypeName1");
                });

            modelBuilder.Entity("PokePredict.Database.Models.Move", b =>
                {
                    b.HasOne("PokePredict.Database.Models.Pokemon", null)
                        .WithMany("Moves")
                        .HasForeignKey("PokemonName");
                });

            modelBuilder.Entity("PokePredict.Database.Models.Stat", b =>
                {
                    b.HasOne("PokePredict.Database.Models.Pokemon", null)
                        .WithMany("Stats")
                        .HasForeignKey("PokemonName");
                });

            modelBuilder.Entity("PokePredict.Database.Models.StatChange", b =>
                {
                    b.HasOne("PokePredict.Database.Models.Move", null)
                        .WithMany("StatChanges")
                        .HasForeignKey("MoveName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokePredict.Database.Models.Type", b =>
                {
                    b.HasOne("PokePredict.Database.Models.Pokemon", null)
                        .WithMany("Types")
                        .HasForeignKey("PokemonName");
                });
#pragma warning restore 612, 618
        }
    }
}
